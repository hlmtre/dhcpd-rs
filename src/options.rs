use std::convert::TryInto;
use std::fmt;

const MAGIC_COOKIE: [u8; 4] = [0x62, 0x82, 0x53, 0x63];

/*
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |
   +---------------+---------------+---------------+---------------+
   |                            xid (4)                            |
   +-------------------------------+-------------------------------+
   |           secs (2)            |           flags (2)           |
   +-------------------------------+-------------------------------+
   |                          ciaddr  (4)                          |
   +---------------------------------------------------------------+
   |                          yiaddr  (4)                          |
   +---------------------------------------------------------------+
   |                          siaddr  (4)                          |
   +---------------------------------------------------------------+
   |                          giaddr  (4)                          |
   +---------------------------------------------------------------+
   |                                                               |
   |                          chaddr  (16)                         |
   |                                                               |
   |                                                               |
   +---------------------------------------------------------------+
   |                                                               |
   |                          sname   (64)                         |
   +---------------------------------------------------------------+
   |                                                               |
   |                          file    (128)                        |
   +---------------------------------------------------------------+
   |                                                               |
   |                          options (variable)                   |
   +---------------------------------------------------------------+
*/
///
///  op (1 byte): 1 indicates a request, 2 a reply
///  htype (1 byte): ethernet is 1, 6 is IEEE 802 networks, 7 ARCNET. generally 6.
///  hlen (1): hardware address length. MAC address length; generally 6.
///  hops (1): generally 1. used by DHCP relays to go beyond subnet boundaries.
///  xid (4 bytes): transaction identifier. 32-bit identifier field generated by client, to match with replies from DHCP server.
///  secs (2): seconds elapsed since client began attempting to get an address. used by DHCP servers to prioritize responses.
///  flags (2): mostly unused flags area. subfield first bit is the Broadcast flag - client doesn't know its own IP yet, so respond by broadcast.
///  ciadrr (4): client puts is own address here. used only for RENEW, REBINDING, BOUND; otherwise 0. cuz it doesn't have one yet.
///  yiaddrr (4): 'your' ip address. take this, assign it to yourself. from dhcp server to client.
///  siaddr: (4): server ip address. usually the server's own.
///  giaddr (4): gateway ip (NOT DHCP DEFAULT GATEWAY. THAT'S ITS OWN DHCP OPTION.)
///  chwaddr (16): the client's mac address, used for making this a converation.
///  sname (64): server name.
///  file (128): boot filename.
///  options (variable): dhcp options, variable length.
///
#[derive(Default, Debug, Clone)]
pub(crate) struct DhcpMessage {
  op: u8,
  htype: u8,
  hlen: u8,
  hops: u8,
  xid: u32,
  secs: u16,
  flags: u16,
  ciaddr: u32,
  yiaddr: u32,
  siaddr: u32,
  giaddr: u32,
  pub chaddr: Vec<u8>,
  sname: usize,
  file: usize,
  options: Vec<u128>,
}

impl fmt::Display for DhcpMessage {
  fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    let s: &str = if self.op == 1 { "request" } else { "reply" };
    write!(
      f,
      "
       message type: {}
       mac length:   {}
       mac address:  {}",
      s,
      self.hlen,
      self.format_mac()
    )
  }
}

impl DhcpMessage {
  pub(crate) fn format_mac(&self) -> String {
    format!(
      "{:02x}:{:02x}:{:02x}:{:02x}:{:02x}:{:02x}",
      self.chaddr[0],
      self.chaddr[1],
      self.chaddr[2],
      self.chaddr[3],
      self.chaddr[4],
      self.chaddr[5]
    )
  }

  pub(crate) fn parse(&mut self, buf: &[u8]) {
    self.op = buf[0];
    self.htype = buf[1];
    self.hlen = buf[2];
    self.hops = buf[3];
    self.xid = u32::from_be_bytes(buf[4..8].try_into().unwrap());
    self.secs = u16::from_be_bytes(buf[9..11].try_into().unwrap());
    self.flags = u16::from_be_bytes(buf[11..13].try_into().unwrap());
    self.ciaddr = u32::from_be_bytes(buf[13..17].try_into().unwrap());
    self.yiaddr = u32::from_be_bytes(buf[17..21].try_into().unwrap());
    if self.hlen == 6 {
      self.chaddr = buf[28..34].to_vec();
    } else {
      self.chaddr = buf[28..36].to_vec();
    }
  }
  pub(crate) fn get_options_index(&self, ba: &[u8]) {
    let mmc = MAGIC_COOKIE;
    match ba {
      mmc => {
        println!(
          "magic cookie found! see: {}",
          mmc.iter().map(|x| format!("{:02x}", x)).collect::<String>()
        );
      }
    }
  }
}
